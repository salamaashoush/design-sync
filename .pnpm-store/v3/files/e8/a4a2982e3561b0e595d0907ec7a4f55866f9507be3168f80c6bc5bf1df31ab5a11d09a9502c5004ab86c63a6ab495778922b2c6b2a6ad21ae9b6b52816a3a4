{"version":3,"file":"index.mjs","sources":["../../src/index.ts"],"sourcesContent":["import { transformAsync, TransformOptions } from '@babel/core';\nimport ts from '@babel/preset-typescript';\nimport solid from 'babel-preset-solid';\nimport { readFileSync } from 'fs';\nimport { mergeAndConcat } from 'merge-anything';\nimport { createRequire } from 'module';\nimport solidRefresh from 'solid-refresh/babel';\nimport { createFilter } from 'vite';\nimport type { Alias, AliasOptions, Plugin, FilterPattern } from 'vite';\nimport { crawlFrameworkPkgs } from 'vitefu';\n\nconst require = createRequire(import.meta.url);\n\nconst runtimePublicPath = '/@solid-refresh';\nconst runtimeFilePath = require.resolve('solid-refresh/dist/solid-refresh.mjs');\nconst runtimeCode = readFileSync(runtimeFilePath, 'utf-8');\n\n/** Possible options for the extensions property */\nexport interface ExtensionOptions {\n  typescript?: boolean;\n}\n\n/** Configuration options for vite-plugin-solid. */\nexport interface Options {\n  /**\n   * A [picomatch](https://github.com/micromatch/picomatch) pattern, or array of patterns, which specifies the files\n   * the plugin should operate on.\n   */\n  include?: FilterPattern;\n  /**\n   * A [picomatch](https://github.com/micromatch/picomatch) pattern, or array of patterns, which specifies the files\n   * to be ignored by the plugin.\n   */\n  exclude?: FilterPattern;\n  /**\n   * This will inject solid-js/dev in place of solid-js in dev mode. Has no\n   * effect in prod. If set to `false`, it won't inject it in dev. This is\n   * useful for extra logs and debugging.\n   *\n   * @default true\n   */\n  dev: boolean;\n  /**\n   * This will force SSR code in the produced files. This is experiemental\n   * and mostly not working yet.\n   *\n   * @default false\n   */\n  ssr: boolean;\n\n  /**\n   * This will inject HMR runtime in dev mode. Has no effect in prod. If\n   * set to `false`, it won't inject the runtime in dev.\n   *\n   * @default true\n   */\n  hot: boolean;\n  /**\n   * This registers additional extensions that should be processed by\n   * vite-plugin-solid.\n   *\n   * @default undefined\n   */\n  extensions?: (string | [string, ExtensionOptions])[];\n  /**\n   * Pass any additional babel transform options. They will be merged with\n   * the transformations required by Solid.\n   *\n   * @default {}\n   */\n  babel:\n    | TransformOptions\n    | ((source: string, id: string, ssr: boolean) => TransformOptions)\n    | ((source: string, id: string, ssr: boolean) => Promise<TransformOptions>);\n  typescript: {\n    /**\n     * Forcibly enables jsx parsing. Otherwise angle brackets will be treated as\n     * typescript's legacy type assertion var foo = <string>bar;. Also, isTSX:\n     * true requires allExtensions: true.\n     *\n     * @default false\n     */\n    isTSX?: boolean;\n\n    /**\n     * Replace the function used when compiling JSX expressions. This is so that\n     * we know that the import is not a type import, and should not be removed.\n     *\n     * @default React\n     */\n    jsxPragma?: string;\n\n    /**\n     * Replace the function used when compiling JSX fragment expressions. This\n     * is so that we know that the import is not a type import, and should not\n     * be removed.\n     *\n     * @default React.Fragment\n     */\n    jsxPragmaFrag?: string;\n\n    /**\n     * Indicates that every file should be parsed as TS or TSX (depending on the\n     * isTSX option).\n     *\n     * @default false\n     */\n    allExtensions?: boolean;\n\n    /**\n     * Enables compilation of TypeScript namespaces.\n     *\n     * @default uses the default set by @babel/plugin-transform-typescript.\n     */\n    allowNamespaces?: boolean;\n\n    /**\n     * When enabled, type-only class fields are only removed if they are\n     * prefixed with the declare modifier:\n     *\n     * > NOTE: This will be enabled by default in Babel 8\n     *\n     * @default false\n     *\n     * @example\n     * ```ts\n     * class A {\n     *   declare foo: string; // Removed\n     *   bar: string; // Initialized to undefined\n     *    prop?: string; // Initialized to undefined\n     *    prop1!: string // Initialized to undefined\n     * }\n     * ```\n     */\n    allowDeclareFields?: boolean;\n\n    /**\n     * When set to true, the transform will only remove type-only imports\n     * (introduced in TypeScript 3.8). This should only be used if you are using\n     * TypeScript >= 3.8.\n     *\n     * @default false\n     */\n    onlyRemoveTypeImports?: boolean;\n\n    /**\n     * When set to true, Babel will inline enum values rather than using the\n     * usual enum output:\n     *\n     * This option differs from TypeScript's --isolatedModules behavior, which\n     * ignores the const modifier and compiles them as normal enums, and aligns\n     * Babel's behavior with TypeScript's default behavior.\n     *\n     * ```ts\n     *  // Input\n     *  const enum Animals {\n     *    Fish\n     *  }\n     *  console.log(Animals.Fish);\n     *\n     *  // Default output\n     *  var Animals;\n     *\n     *  (function (Animals) {\n     *    Animals[Animals[\"Fish\"] = 0] = \"Fish\";\n     *  })(Animals || (Animals = {}));\n     *\n     *  console.log(Animals.Fish);\n     *\n     *  // `optimizeConstEnums` output\n     *  console.log(0);\n     * ```\n     *\n     * However, when exporting a const enum Babel will compile it to a plain\n     * object literal so that it doesn't need to rely on cross-file analysis\n     * when compiling it:\n     *\n     * ```ts\n     * // Input\n     * export const enum Animals {\n     *   Fish,\n     * }\n     *\n     * // `optimizeConstEnums` output\n     * export var Animals = {\n     *     Fish: 0,\n     * };\n     * ```\n     *\n     * @default false\n     */\n    optimizeConstEnums?: boolean;\n  };\n  /**\n   * Pass any additional [babel-plugin-jsx-dom-expressions](https://github.com/ryansolid/dom-expressions/tree/main/packages/babel-plugin-jsx-dom-expressions#plugin-options).\n   * They will be merged with the defaults sets by [babel-preset-solid](https://github.com/solidjs/solid/blob/main/packages/babel-preset-solid/index.js#L8-L25).\n   *\n   * @default {}\n   */\n  solid: {\n\n    \n    /**\n     * Removed unnecessary closing tags from template strings. More info here:\n     * https://github.com/solidjs/solid/blob/main/CHANGELOG.md#smaller-templates\n     *\n     * @default false\n     */\n    omitNestedClosingTags: boolean;\n\n    /**\n     * The name of the runtime module to import the methods from.\n     *\n     * @default \"solid-js/web\"\n     */\n    moduleName?: string;\n\n    /**\n     * The output mode of the compiler.\n     * Can be:\n     * - \"dom\" is standard output\n     * - \"ssr\" is for server side rendering of strings.\n     * - \"universal\" is for using custom renderers from solid-js/universal\n     *\n     * @default \"dom\"\n     */\n    generate?: 'ssr' | 'dom' | 'universal';\n\n    /**\n     * Indicate whether the output should contain hydratable markers.\n     *\n     * @default false\n     */\n    hydratable?: boolean;\n\n    /**\n     * Boolean to indicate whether to enable automatic event delegation on camelCase.\n     *\n     * @default true\n     */\n    delegateEvents?: boolean;\n\n    /**\n     * Boolean indicates whether smart conditional detection should be used.\n     * This optimizes simple boolean expressions and ternaries in JSX.\n     *\n     * @default true\n     */\n    wrapConditionals?: boolean;\n\n    /**\n     * Boolean indicates whether to set current render context on Custom Elements and slots.\n     * Useful for seemless Context API with Web Components.\n     *\n     * @default true\n     */\n    contextToCustomElements?: boolean;\n\n    /**\n     * Array of Component exports from module, that aren't included by default with the library.\n     * This plugin will automatically import them if it comes across them in the JSX.\n     *\n     * @default [\"For\",\"Show\",\"Switch\",\"Match\",\"Suspense\",\"SuspenseList\",\"Portal\",\"Index\",\"Dynamic\",\"ErrorBoundary\"]\n     */\n    builtIns?: string[];\n  };\n}\n\nfunction getExtension(filename: string): string {\n  const index = filename.lastIndexOf('.');\n  return index < 0 ? '' : filename.substring(index).replace(/\\?.+$/, '');\n}\nfunction containsSolidField(fields) {\n  const keys = Object.keys(fields);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (key === 'solid') return true;\n    if (typeof fields[key] === 'object' && fields[key] != null && containsSolidField(fields[key]))\n      return true;\n  }\n  return false;\n}\nfunction isJestDomInstalled() {\n  try {\n    // attempt to reference a file that will not throw error because expect is missing\n    require('@testing-library/jest-dom/dist/utils');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport default function solidPlugin(options: Partial<Options> = {}): Plugin {\n  const filter = createFilter(options.include, options.exclude);\n\n  let needHmr = false;\n  let replaceDev = false;\n  let projectRoot = process.cwd();\n\n  return {\n    name: 'solid',\n    enforce: 'pre',\n\n    async config(userConfig, { command }) {\n      // We inject the dev mode only if the user explicitely wants it or if we are in dev (serve) mode\n      replaceDev = options.dev === true || (options.dev !== false && command === 'serve');\n      projectRoot = userConfig.root;\n\n      if (!userConfig.resolve) userConfig.resolve = {};\n      userConfig.resolve.alias = normalizeAliases(userConfig.resolve && userConfig.resolve.alias);\n\n      const solidPkgsConfig = await crawlFrameworkPkgs({\n        viteUserConfig: userConfig,\n        root: projectRoot || process.cwd(),\n        isBuild: command === 'build',\n        isFrameworkPkgByJson(pkgJson) {\n          return containsSolidField(pkgJson.exports || {});\n        },\n      });\n\n      // fix for bundling dev in production\n      const nestedDeps = replaceDev\n        ? ['solid-js', 'solid-js/web', 'solid-js/store', 'solid-js/html', 'solid-js/h']\n        : [];\n\n      const test =\n        userConfig.mode === 'test'\n          ? {\n              test: {\n                globals: true,\n                ...(options.ssr ? {} : { environment: 'jsdom' }),\n                transformMode: {\n                  [options.ssr ? 'ssr' : 'web']: [/\\.[jt]sx?$/],\n                },\n                ...(isJestDomInstalled()\n                  ? { setupFiles: [require.resolve('@testing-library/jest-dom/extend-expect.js')] }\n                  : {}),\n                deps: { registerNodeLoader: true },\n              },\n            }\n          : {};\n\n      return {\n        /**\n         * We only need esbuild on .ts or .js files.\n         * .tsx & .jsx files are handled by us\n         */\n        esbuild: { include: /\\.ts$/ },\n        resolve: {\n          conditions: [\n            'solid',\n            ...(replaceDev ? ['development'] : []),\n            ...(userConfig.mode === 'test' && !options.ssr ? ['browser'] : []),\n          ],\n          dedupe: nestedDeps,\n          alias: [{ find: /^solid-refresh$/, replacement: runtimePublicPath }],\n        },\n        optimizeDeps: {\n          include: [...nestedDeps, ...solidPkgsConfig.optimizeDeps.include],\n          exclude: solidPkgsConfig.optimizeDeps.exclude,\n        },\n        ssr: solidPkgsConfig.ssr,\n        ...test,\n      };\n    },\n\n    configResolved(config) {\n      needHmr = config.command === 'serve' && config.mode !== 'production' && options.hot !== false;\n    },\n\n    resolveId(id) {\n      if (id === runtimePublicPath) return id;\n    },\n\n    load(id) {\n      if (id === runtimePublicPath) return runtimeCode;\n    },\n\n    async transform(source, id, transformOptions) {\n      const isSsr = transformOptions && transformOptions.ssr;\n      const currentFileExtension = getExtension(id);\n\n      const extensionsToWatch = [...(options.extensions || []), '.tsx', '.jsx'];\n      const allExtensions = extensionsToWatch.map((extension) =>\n        // An extension can be a string or a tuple [extension, options]\n        typeof extension === 'string' ? extension : extension[0],\n      );\n\n      if (!filter(id) || !allExtensions.includes(currentFileExtension)) {\n        return null;\n      }\n\n      const inNodeModules = /node_modules/.test(id);\n\n      let solidOptions: { generate: 'ssr' | 'dom'; hydratable: boolean };\n\n      if (options.ssr) {\n        if (isSsr) {\n          solidOptions = { generate: 'ssr', hydratable: true };\n        } else {\n          solidOptions = { generate: 'dom', hydratable: true };\n        }\n      } else {\n        solidOptions = { generate: 'dom', hydratable: false };\n      }\n\n      id = id.replace(/\\?.+$/, '');\n\n      const opts: TransformOptions = {\n        babelrc: false,\n        configFile: false,\n        root: projectRoot,\n        filename: id,\n        sourceFileName: id,\n        presets: [[solid, { ...solidOptions, ...(options.solid || {}) }]],\n        plugins: needHmr && !isSsr && !inNodeModules ? [[solidRefresh, { bundler: 'vite' }]] : [],\n        sourceMaps: true,\n        // Vite handles sourcemap flattening\n        inputSourceMap: false as any,\n      };\n\n      // We need to know if the current file extension has a typescript options tied to it\n      const shouldBeProcessedWithTypescript = extensionsToWatch.some((extension) => {\n        if (typeof extension === 'string') {\n          return extension.includes('tsx');\n        }\n\n        const [extensionName, extensionOptions] = extension;\n        if (extensionName !== currentFileExtension) return false;\n\n        return extensionOptions.typescript;\n      });\n\n      if (shouldBeProcessedWithTypescript) {\n        opts.presets.push([ts, options.typescript || {}]);\n      }\n\n      // Default value for babel user options\n      let babelUserOptions: TransformOptions = {};\n\n      if (options.babel) {\n        if (typeof options.babel === 'function') {\n          const babelOptions = options.babel(source, id, isSsr);\n          babelUserOptions = babelOptions instanceof Promise ? await babelOptions : babelOptions;\n        } else {\n          babelUserOptions = options.babel;\n        }\n      }\n\n      const babelOptions = mergeAndConcat(babelUserOptions, opts) as TransformOptions;\n\n      const { code, map } = await transformAsync(source, babelOptions);\n\n      return { code, map };\n    },\n  };\n}\n\n/**\n * This basically normalize all aliases of the config into\n * the array format of the alias.\n *\n * eg: alias: { '@': 'src/' } => [{ find: '@', replacement: 'src/' }]\n */\nfunction normalizeAliases(alias: AliasOptions = []): Alias[] {\n  return Array.isArray(alias)\n    ? alias\n    : Object.entries(alias).map(([find, replacement]) => ({ find, replacement }));\n}\n"],"names":["require","createRequire","import","meta","url","runtimePublicPath","runtimeFilePath","resolve","runtimeCode","readFileSync","getExtension","filename","index","lastIndexOf","substring","replace","containsSolidField","fields","keys","Object","i","length","key","isJestDomInstalled","e","solidPlugin","options","filter","createFilter","include","exclude","needHmr","replaceDev","projectRoot","process","cwd","name","enforce","config","userConfig","command","dev","root","alias","normalizeAliases","solidPkgsConfig","crawlFrameworkPkgs","viteUserConfig","isBuild","isFrameworkPkgByJson","pkgJson","exports","nestedDeps","test","mode","globals","ssr","environment","transformMode","setupFiles","deps","registerNodeLoader","esbuild","conditions","dedupe","find","replacement","optimizeDeps","configResolved","hot","resolveId","id","load","transform","source","transformOptions","isSsr","currentFileExtension","extensionsToWatch","extensions","allExtensions","map","extension","includes","inNodeModules","solidOptions","generate","hydratable","opts","babelrc","configFile","sourceFileName","presets","solid","plugins","solidRefresh","bundler","sourceMaps","inputSourceMap","shouldBeProcessedWithTypescript","some","extensionName","extensionOptions","typescript","push","ts","babelUserOptions","babel","babelOptions","Promise","mergeAndConcat","code","transformAsync","Array","isArray","entries"],"mappings":"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"}