import type { ComponentChildren } from 'preact';
import type { JSX } from 'preact/jsx-runtime';
import type { FieldValues, FormStore, Maybe, MaybePromise, ResponseData } from '../types';
/**
 * Value type of the submit event object.
 */
export type SubmitEvent = Event & {
    submitter: HTMLElement;
} & {
    currentTarget: HTMLFormElement;
    target: Element;
};
/**
 * Function type to handle the submission of the form.
 */
export type SubmitHandler<TFieldValues extends FieldValues> = (values: TFieldValues, event: JSX.TargetedEvent<HTMLFormElement, Event>) => MaybePromise<any>;
/**
 * Value type of the form properties.
 */
export type FormProps<TFieldValues extends FieldValues, TResponseData extends ResponseData> = Omit<JSX.HTMLAttributes<HTMLFormElement>, 'onSubmit'> & {
    of: FormStore<TFieldValues, TResponseData>;
    onSubmit: SubmitHandler<TFieldValues>;
    responseDuration?: Maybe<number>;
    keepResponse?: Maybe<boolean>;
    shouldActive?: Maybe<boolean>;
    shouldTouched?: Maybe<boolean>;
    shouldDirty?: Maybe<boolean>;
    shouldFocus?: Maybe<boolean>;
    children: ComponentChildren;
};
/**
 * HTML form element that simplifies form submission and disables the browser's
 * default form validation.
 */
export declare function Form<TFieldValues extends FieldValues, TResponseData extends ResponseData>({ of: form, onSubmit, responseDuration: duration, keepResponse, shouldActive, shouldTouched, shouldDirty, shouldFocus, ...props }: FormProps<TFieldValues, TResponseData>): JSX.Element;
