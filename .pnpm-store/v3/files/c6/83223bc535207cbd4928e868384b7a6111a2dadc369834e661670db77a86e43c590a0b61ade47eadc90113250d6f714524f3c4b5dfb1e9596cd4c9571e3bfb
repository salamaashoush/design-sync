{"version":3,"file":"signals-core.js","sources":["../src/index.ts"],"sourcesContent":["function cycleDetected(): never {\n\tthrow new Error(\"Cycle detected\");\n}\nfunction mutationDetected(): never {\n\tthrow new Error(\"Computed cannot have side-effects\");\n}\n\nconst identifier = Symbol.for('preact-signals')\n\n// Flags for Computed and Effect.\nconst RUNNING = 1 << 0;\nconst NOTIFIED = 1 << 1;\nconst OUTDATED = 1 << 2;\nconst DISPOSED = 1 << 3;\nconst HAS_ERROR = 1 << 4;\nconst TRACKING = 1 << 5;\n\n// A linked list node used to track dependencies (sources) and dependents (targets).\n// Also used to remember the source's last version number that the target saw.\ntype Node = {\n\t// A source whose value the target depends on.\n\t_source: Signal;\n\t_prevSource?: Node;\n\t_nextSource?: Node;\n\n\t// A target that depends on the source and should be notified when the source changes.\n\t_target: Computed | Effect;\n\t_prevTarget?: Node;\n\t_nextTarget?: Node;\n\n\t// The version number of the source that target has last seen. We use version numbers\n\t// instead of storing the source value, because source values can take arbitrary amount\n\t// of memory, and computeds could hang on to them forever because they're lazily evaluated.\n\t// Use the special value -1 to mark potentially unused but recyclable nodes.\n\t_version: number;\n\n\t// Used to remember & roll back the source's previous `._node` value when entering &\n\t// exiting a new evaluation context.\n\t_rollbackNode?: Node;\n};\n\nfunction startBatch() {\n\tbatchDepth++;\n}\n\nfunction endBatch() {\n\tif (batchDepth > 1) {\n\t\tbatchDepth--;\n\t\treturn;\n\t}\n\n\tlet error: unknown;\n\tlet hasError = false;\n\n\twhile (batchedEffect !== undefined) {\n\t\tlet effect: Effect | undefined = batchedEffect;\n\t\tbatchedEffect = undefined;\n\n\t\tbatchIteration++;\n\n\t\twhile (effect !== undefined) {\n\t\t\tconst next: Effect | undefined = effect._nextBatchedEffect;\n\t\t\teffect._nextBatchedEffect = undefined;\n\t\t\teffect._flags &= ~NOTIFIED;\n\n\t\t\tif (!(effect._flags & DISPOSED) && needsToRecompute(effect)) {\n\t\t\t\ttry {\n\t\t\t\t\teffect._callback();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (!hasError) {\n\t\t\t\t\t\terror = err;\n\t\t\t\t\t\thasError = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\teffect = next;\n\t\t}\n\t}\n\tbatchIteration = 0;\n\tbatchDepth--;\n\n\tif (hasError) {\n\t\tthrow error;\n\t}\n}\n\nfunction batch<T>(callback: () => T): T {\n\tif (batchDepth > 0) {\n\t\treturn callback();\n\t}\n\t/*@__INLINE__**/ startBatch();\n\ttry {\n\t\treturn callback();\n\t} finally {\n\t\tendBatch();\n\t}\n}\n\n// Currently evaluated computed or effect.\nlet evalContext: Computed | Effect | undefined = undefined;\n\nlet untrackedDepth = 0;\n\nfunction untracked<T>(callback: () => T): T {\n\tif (untrackedDepth > 0) {\n\t\treturn callback();\n\t}\n\tconst prevContext = evalContext;\n\tevalContext = undefined;\n\tuntrackedDepth++;\n\ttry {\n\t\treturn callback();\n\t} finally {\n\t\tuntrackedDepth--;\n\t\tevalContext = prevContext;\n\t}\n}\n\n// Effects collected into a batch.\nlet batchedEffect: Effect | undefined = undefined;\nlet batchDepth = 0;\nlet batchIteration = 0;\n\n// A global version number for signals, used for fast-pathing repeated\n// computed.peek()/computed.value calls when nothing has changed globally.\nlet globalVersion = 0;\n\nfunction addDependency(signal: Signal): Node | undefined {\n\tif (evalContext === undefined) {\n\t\treturn undefined;\n\t}\n\n\tlet node = signal._node;\n\tif (node === undefined || node._target !== evalContext) {\n\t\t/**\n\t\t * `signal` is a new dependency. Create a new dependency node, and set it\n\t\t * as the tail of the current context's dependency list. e.g:\n\t\t *\n\t\t * { A <-> B       }\n\t\t *         ↑     ↑\n\t\t *        tail  node (new)\n\t\t *               ↓\n\t\t * { A <-> B <-> C }\n\t\t *               ↑\n\t\t *              tail (evalContext._sources)\n\t\t */\n\t\tnode = {\n\t\t\t_version: 0,\n\t\t\t_source: signal,\n\t\t\t_prevSource: evalContext._sources,\n\t\t\t_nextSource: undefined,\n\t\t\t_target: evalContext,\n\t\t\t_prevTarget: undefined,\n\t\t\t_nextTarget: undefined,\n\t\t\t_rollbackNode: node,\n\t\t};\n\n\t\tif (evalContext._sources !== undefined) {\n\t\t\tevalContext._sources._nextSource = node;\n\t\t}\n\t\tevalContext._sources = node;\n\t\tsignal._node = node;\n\n\t\t// Subscribe to change notifications from this dependency if we're in an effect\n\t\t// OR evaluating a computed signal that in turn has subscribers.\n\t\tif (evalContext._flags & TRACKING) {\n\t\t\tsignal._subscribe(node);\n\t\t}\n\t\treturn node;\n\t} else if (node._version === -1) {\n\t\t// `signal` is an existing dependency from a previous evaluation. Reuse it.\n\t\tnode._version = 0;\n\n\t\t/**\n\t\t * If `node` is not already the current tail of the dependency list (i.e.\n\t\t * there is a next node in the list), then make the `node` the new tail. e.g:\n\t\t *\n\t\t * { A <-> B <-> C <-> D }\n\t\t *         ↑           ↑\n\t\t *        node   ┌─── tail (evalContext._sources)\n\t\t *         └─────│─────┐\n\t\t *               ↓     ↓\n\t\t * { A <-> C <-> D <-> B }\n\t\t *                     ↑\n\t\t *                    tail (evalContext._sources)\n\t\t */\n\t\tif (node._nextSource !== undefined) {\n\t\t\tnode._nextSource._prevSource = node._prevSource;\n\n\t\t\tif (node._prevSource !== undefined) {\n\t\t\t\tnode._prevSource._nextSource = node._nextSource;\n\t\t\t}\n\n\t\t\tnode._prevSource = evalContext._sources;\n\t\t\tnode._nextSource = undefined;\n\n\t\t\tevalContext._sources!._nextSource = node;\n\t\t\tevalContext._sources = node;\n\t\t}\n\n\t\t// We can assume that the currently evaluated effect / computed signal is already\n\t\t// subscribed to change notifications from `signal` if needed.\n\t\treturn node;\n\t}\n\treturn undefined;\n}\n\n// @ts-ignore internal Signal is viewed as a function\ndeclare class Signal<T = any> {\n\t/** @internal */\n\t_value: unknown;\n\n\t/**\n\t * @internal\n\t * Version numbers should always be >= 0, because the special value -1 is used\n\t * by Nodes to signify potentially unused but recyclable nodes.\n\t */\n\t_version: number;\n\n\t/** @internal */\n\t_node?: Node;\n\n\t/** @internal */\n\t_targets?: Node;\n\n\tconstructor(value?: T);\n\n\t/** @internal */\n\t_refresh(): boolean;\n\n\t/** @internal */\n\t_subscribe(node: Node): void;\n\n\t/** @internal */\n\t_unsubscribe(node: Node): void;\n\n\tsubscribe(fn: (value: T) => void): () => void;\n\n\tvalueOf(): T;\n\n\ttoString(): string;\n\n\ttoJSON(): T;\n\n\tpeek(): T;\n\n\tbrand: typeof identifier;\n\n\tget value(): T;\n\tset value(value: T);\n}\n\n/** @internal */\n// @ts-ignore internal Signal is viewed as function\nfunction Signal(this: Signal, value?: unknown) {\n\tthis._value = value;\n\tthis._version = 0;\n\tthis._node = undefined;\n\tthis._targets = undefined;\n}\n\nSignal.prototype.brand = identifier\n\nSignal.prototype._refresh = function () {\n\treturn true;\n};\n\nSignal.prototype._subscribe = function (node) {\n\tif (this._targets !== node && node._prevTarget === undefined) {\n\t\tnode._nextTarget = this._targets;\n\t\tif (this._targets !== undefined) {\n\t\t\tthis._targets._prevTarget = node;\n\t\t}\n\t\tthis._targets = node;\n\t}\n};\n\nSignal.prototype._unsubscribe = function (node) {\n\t// Only run the unsubscribe step if the signal has any subscribers to begin with.\n\tif (this._targets !== undefined) {\n\t\tconst prev = node._prevTarget;\n\t\tconst next = node._nextTarget;\n\t\tif (prev !== undefined) {\n\t\t\tprev._nextTarget = next;\n\t\t\tnode._prevTarget = undefined;\n\t\t}\n\t\tif (next !== undefined) {\n\t\t\tnext._prevTarget = prev;\n\t\t\tnode._nextTarget = undefined;\n\t\t}\n\t\tif (node === this._targets) {\n\t\t\tthis._targets = next;\n\t\t}\n\t}\n};\n\nSignal.prototype.subscribe = function (fn) {\n\tconst signal = this;\n\treturn effect(function (this: Effect) {\n\t\tconst value = signal.value;\n\t\tconst flag = this._flags & TRACKING;\n\t\tthis._flags &= ~TRACKING;\n\t\ttry {\n\t\t\tfn(value);\n\t\t} finally {\n\t\t\tthis._flags |= flag;\n\t\t}\n\t});\n};\n\nSignal.prototype.valueOf = function () {\n\treturn this.value;\n};\n\nSignal.prototype.toString = function () {\n\treturn this.value + \"\";\n};\n\nSignal.prototype.toJSON = function () {\n\treturn this.value;\n};\n\nSignal.prototype.peek = function () {\n\treturn this._value;\n};\n\nObject.defineProperty(Signal.prototype, \"value\", {\n\tget() {\n\t\tconst node = addDependency(this);\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\treturn this._value;\n\t},\n\tset(this: Signal, value) {\n\t\tif (evalContext instanceof Computed) {\n\t\t\tmutationDetected();\n\t\t}\n\n\t\tif (value !== this._value) {\n\t\t\tif (batchIteration > 100) {\n\t\t\t\tcycleDetected();\n\t\t\t}\n\n\t\t\tthis._value = value;\n\t\t\tthis._version++;\n\t\t\tglobalVersion++;\n\n\t\t\t/**@__INLINE__*/ startBatch();\n\t\t\ttry {\n\t\t\t\tfor (\n\t\t\t\t\tlet node = this._targets;\n\t\t\t\t\tnode !== undefined;\n\t\t\t\t\tnode = node._nextTarget\n\t\t\t\t) {\n\t\t\t\t\tnode._target._notify();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tendBatch();\n\t\t\t}\n\t\t}\n\t},\n});\n\nfunction signal<T>(value: T): Signal<T> {\n\treturn new Signal(value);\n}\n\nfunction needsToRecompute(target: Computed | Effect): boolean {\n\t// Check the dependencies for changed values. The dependency list is already\n\t// in order of use. Therefore if multiple dependencies have changed values, only\n\t// the first used dependency is re-evaluated at this point.\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\t// If there's a new version of the dependency before or after refreshing,\n\t\t// or the dependency has something blocking it from refreshing at all (e.g. a\n\t\t// dependency cycle), then we need to recompute.\n\t\tif (\n\t\t\tnode._source._version !== node._version ||\n\t\t\t!node._source._refresh() ||\n\t\t\tnode._source._version !== node._version\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t// If none of the dependencies have changed values since last recompute then\n\t// there's no need to recompute.\n\treturn false;\n}\n\nfunction prepareSources(target: Computed | Effect) {\n\t/**\n\t * 1. Mark all current sources as re-usable nodes (version: -1)\n\t * 2. Set a rollback node if the current node is being used in a different context\n\t * 3. Point 'target._sources' to the tail of the doubly-linked list, e.g:\n\t *\n\t *    { undefined <- A <-> B <-> C -> undefined }\n\t *                   ↑           ↑\n\t *                   │           └──────┐\n\t * target._sources = A; (node is head)  │\n\t *                   ↓                  │\n\t * target._sources = C; (node is tail) ─┘\n\t */\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tconst rollbackNode = node._source._node;\n\t\tif (rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = rollbackNode;\n\t\t}\n\t\tnode._source._node = node;\n\t\tnode._version = -1;\n\n\t\tif (node._nextSource === undefined) {\n\t\t\ttarget._sources = node;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction cleanupSources(target: Computed | Effect) {\n\tlet node = target._sources;\n\tlet head = undefined;\n\n\t/**\n\t * At this point 'target._sources' points to the tail of the doubly-linked list.\n\t * It contains all existing sources + new sources in order of use.\n\t * Iterate backwards until we find the head node while dropping old dependencies.\n\t */\n\twhile (node !== undefined) {\n\t\tconst prev = node._prevSource;\n\n\t\t/**\n\t\t * The node was not re-used, unsubscribe from its change notifications and remove itself\n\t\t * from the doubly-linked list. e.g:\n\t\t *\n\t\t * { A <-> B <-> C }\n\t\t *         ↓\n\t\t *    { A <-> C }\n\t\t */\n\t\tif (node._version === -1) {\n\t\t\tnode._source._unsubscribe(node);\n\n\t\t\tif (prev !== undefined) {\n\t\t\t\tprev._nextSource = node._nextSource;\n\t\t\t}\n\t\t\tif (node._nextSource !== undefined) {\n\t\t\t\tnode._nextSource._prevSource = prev;\n\t\t\t}\n\t\t} else {\n\t\t\t/**\n\t\t\t * The new head is the last node seen which wasn't removed/unsubscribed\n\t\t\t * from the doubly-linked list. e.g:\n\t\t\t *\n\t\t\t * { A <-> B <-> C }\n\t\t\t *   ↑     ↑     ↑\n\t\t\t *   │     │     └ head = node\n\t\t\t *   │     └ head = node\n\t\t\t *   └ head = node\n\t\t\t */\n\t\t\thead = node;\n\t\t}\n\n\t\tnode._source._node = node._rollbackNode;\n\t\tif (node._rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = undefined;\n\t\t}\n\n\t\tnode = prev;\n\t}\n\n\ttarget._sources = head;\n}\n\ndeclare class Computed<T = any> extends Signal<T> {\n\t_compute: () => T;\n\t_sources?: Node;\n\t_globalVersion: number;\n\t_flags: number;\n\n\tconstructor(compute: () => T);\n\n\t_notify(): void;\n\tget value(): T;\n}\n\nfunction Computed(this: Computed, compute: () => unknown) {\n\tSignal.call(this, undefined);\n\n\tthis._compute = compute;\n\tthis._sources = undefined;\n\tthis._globalVersion = globalVersion - 1;\n\tthis._flags = OUTDATED;\n}\n\nComputed.prototype = new Signal() as Computed;\n\nComputed.prototype._refresh = function () {\n\tthis._flags &= ~NOTIFIED;\n\n\tif (this._flags & RUNNING) {\n\t\treturn false;\n\t}\n\n\t// If this computed signal has subscribed to updates from its dependencies\n\t// (TRACKING flag set) and none of them have notified about changes (OUTDATED\n\t// flag not set), then the computed value can't have changed.\n\tif ((this._flags & (OUTDATED | TRACKING)) === TRACKING) {\n\t\treturn true;\n\t}\n\tthis._flags &= ~OUTDATED;\n\n\tif (this._globalVersion === globalVersion) {\n\t\treturn true;\n\t}\n\tthis._globalVersion = globalVersion;\n\n\t// Mark this computed signal running before checking the dependencies for value\n\t// changes, so that the RUNNING flag can be used to notice cyclical dependencies.\n\tthis._flags |= RUNNING;\n\tif (this._version > 0 && !needsToRecompute(this)) {\n\t\tthis._flags &= ~RUNNING;\n\t\treturn true;\n\t}\n\n\tconst prevContext = evalContext;\n\ttry {\n\t\tprepareSources(this);\n\t\tevalContext = this;\n\t\tconst value = this._compute();\n\t\tif (\n\t\t\tthis._flags & HAS_ERROR ||\n\t\t\tthis._value !== value ||\n\t\t\tthis._version === 0\n\t\t) {\n\t\t\tthis._value = value;\n\t\t\tthis._flags &= ~HAS_ERROR;\n\t\t\tthis._version++;\n\t\t}\n\t} catch (err) {\n\t\tthis._value = err;\n\t\tthis._flags |= HAS_ERROR;\n\t\tthis._version++;\n\t}\n\tevalContext = prevContext;\n\tcleanupSources(this);\n\tthis._flags &= ~RUNNING;\n\treturn true;\n};\n\nComputed.prototype._subscribe = function (node) {\n\tif (this._targets === undefined) {\n\t\tthis._flags |= OUTDATED | TRACKING;\n\n\t\t// A computed signal subscribes lazily to its dependencies when the it\n\t\t// gets its first subscriber.\n\t\tfor (\n\t\t\tlet node = this._sources;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextSource\n\t\t) {\n\t\t\tnode._source._subscribe(node);\n\t\t}\n\t}\n\tSignal.prototype._subscribe.call(this, node);\n};\n\nComputed.prototype._unsubscribe = function (node) {\n\t// Only run the unsubscribe step if the computed signal has any subscribers.\n\tif (this._targets !== undefined) {\n\t\tSignal.prototype._unsubscribe.call(this, node);\n\n\t\t// Computed signal unsubscribes from its dependencies when it loses its last subscriber.\n\t\t// This makes it possible for unreferences subgraphs of computed signals to get garbage collected.\n\t\tif (this._targets === undefined) {\n\t\t\tthis._flags &= ~TRACKING;\n\n\t\t\tfor (\n\t\t\t\tlet node = this._sources;\n\t\t\t\tnode !== undefined;\n\t\t\t\tnode = node._nextSource\n\t\t\t) {\n\t\t\t\tnode._source._unsubscribe(node);\n\t\t\t}\n\t\t}\n\t}\n};\n\nComputed.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= OUTDATED | NOTIFIED;\n\n\t\tfor (\n\t\t\tlet node = this._targets;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextTarget\n\t\t) {\n\t\t\tnode._target._notify();\n\t\t}\n\t}\n};\n\nComputed.prototype.peek = function () {\n\tif (!this._refresh()) {\n\t\tcycleDetected();\n\t}\n\tif (this._flags & HAS_ERROR) {\n\t\tthrow this._value;\n\t}\n\treturn this._value;\n};\n\nObject.defineProperty(Computed.prototype, \"value\", {\n\tget() {\n\t\tif (this._flags & RUNNING) {\n\t\t\tcycleDetected();\n\t\t}\n\t\tconst node = addDependency(this);\n\t\tthis._refresh();\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\tif (this._flags & HAS_ERROR) {\n\t\t\tthrow this._value;\n\t\t}\n\t\treturn this._value;\n\t},\n});\n\ninterface ReadonlySignal<T = any> extends Signal<T> {\n\treadonly value: T;\n}\n\nfunction computed<T>(compute: () => T): ReadonlySignal<T> {\n\treturn new Computed(compute);\n}\n\nfunction cleanupEffect(effect: Effect) {\n\tconst cleanup = effect._cleanup;\n\teffect._cleanup = undefined;\n\n\tif (typeof cleanup === \"function\") {\n\t\t/*@__INLINE__**/ startBatch();\n\n\t\t// Run cleanup functions always outside of any context.\n\t\tconst prevContext = evalContext;\n\t\tevalContext = undefined;\n\t\ttry {\n\t\t\tcleanup();\n\t\t} catch (err) {\n\t\t\teffect._flags &= ~RUNNING;\n\t\t\teffect._flags |= DISPOSED;\n\t\t\tdisposeEffect(effect);\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tevalContext = prevContext;\n\t\t\tendBatch();\n\t\t}\n\t}\n}\n\nfunction disposeEffect(effect: Effect) {\n\tfor (\n\t\tlet node = effect._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tnode._source._unsubscribe(node);\n\t}\n\teffect._compute = undefined;\n\teffect._sources = undefined;\n\n\tcleanupEffect(effect);\n}\n\nfunction endEffect(this: Effect, prevContext?: Computed | Effect) {\n\tif (evalContext !== this) {\n\t\tthrow new Error(\"Out-of-order effect\");\n\t}\n\tcleanupSources(this);\n\tevalContext = prevContext;\n\n\tthis._flags &= ~RUNNING;\n\tif (this._flags & DISPOSED) {\n\t\tdisposeEffect(this);\n\t}\n\tendBatch();\n}\n\ntype EffectCleanup = () => unknown;\ndeclare class Effect {\n\t_compute?: () => unknown | EffectCleanup;\n\t_cleanup?: () => unknown;\n\t_sources?: Node;\n\t_nextBatchedEffect?: Effect;\n\t_flags: number;\n\n\tconstructor(compute: () => unknown | EffectCleanup);\n\n\t_callback(): void;\n\t_start(): () => void;\n\t_notify(): void;\n\t_dispose(): void;\n}\n\nfunction Effect(this: Effect, compute: () => unknown | EffectCleanup) {\n\tthis._compute = compute;\n\tthis._cleanup = undefined;\n\tthis._sources = undefined;\n\tthis._nextBatchedEffect = undefined;\n\tthis._flags = TRACKING;\n}\n\nEffect.prototype._callback = function () {\n\tconst finish = this._start();\n\ttry {\n\t\tif (this._flags & DISPOSED) return;\n\t\tif (this._compute === undefined) return;\n\n\t\tconst cleanup = this._compute();\n\t\tif (typeof cleanup === \"function\") {\n\t\t\tthis._cleanup = cleanup as EffectCleanup;\n\t\t}\n\t} finally {\n\t\tfinish();\n\t}\n};\n\nEffect.prototype._start = function () {\n\tif (this._flags & RUNNING) {\n\t\tcycleDetected();\n\t}\n\tthis._flags |= RUNNING;\n\tthis._flags &= ~DISPOSED;\n\tcleanupEffect(this);\n\tprepareSources(this);\n\n\t/*@__INLINE__**/ startBatch();\n\tconst prevContext = evalContext;\n\tevalContext = this;\n\treturn endEffect.bind(this, prevContext);\n};\n\nEffect.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= NOTIFIED;\n\t\tthis._nextBatchedEffect = batchedEffect;\n\t\tbatchedEffect = this;\n\t}\n};\n\nEffect.prototype._dispose = function () {\n\tthis._flags |= DISPOSED;\n\n\tif (!(this._flags & RUNNING)) {\n\t\tdisposeEffect(this);\n\t}\n};\n\nfunction effect(compute: () => unknown | EffectCleanup): () => void {\n\tconst effect = new Effect(compute);\n\ttry {\n\t\teffect._callback();\n\t} catch (err) {\n\t\teffect._dispose();\n\t\tthrow err;\n\t}\n\t// Return a bound function instead of a wrapper like `() => effect._dispose()`,\n\t// because bound functions seem to be just as fast and take up a lot less memory.\n\treturn effect._dispose.bind(effect);\n}\n\nexport {\n\tsignal,\n\tcomputed,\n\teffect,\n\tbatch,\n\tSignal,\n\ttype ReadonlySignal,\n\tuntracked,\n};\n"],"names":["cycleDetected","Error","identifier","Symbol","endBatch","batchDepth","error","hasError","undefined","batchedEffect","effect","batchIteration","next","_nextBatchedEffect","_flags","needsToRecompute","_callback","err","evalContext","untrackedDepth","globalVersion","addDependency","signal","node","_node","_target","_version","_source","_prevSource","_sources","_nextSource","_prevTarget","_nextTarget","_rollbackNode","_subscribe","Signal","value","this","_value","_targets","prototype","brand","_refresh","_unsubscribe","prev","subscribe","fn","flag","valueOf","toString","toJSON","peek","Object","defineProperty","get","set","Computed","mutationDetected","_notify","target","prepareSources","rollbackNode","cleanupSources","head","compute","call","_compute","_globalVersion","prevContext","OUTDATED","cleanupEffect","cleanup","_cleanup","disposeEffect","endEffect","Effect","finish","_start","bind","_dispose","exports","batch","callback","computed","untracked"],"mappings":"AAAA,SAASA,IACR,MAAM,IAAIC,MAAM,iBACjB,CAKA,IAAMC,EAAaC,WAAW,kBAsC9B,SAASC,IACR,KAAIC,EAAa,GAAjB,CAKA,IAAIC,EACAC,GAAW,EAEf,WAAyBC,IAAlBC,EAA6B,CACnC,IAAIC,EAA6BD,EACjCA,OAAgBD,EAEhBG,IAEA,WAAkBH,IAAXE,EAAsB,CAC5B,IAAME,EAA2BF,EAAOG,EACxCH,EAAOG,OAAqBL,EAC5BE,EAAOI,IAAU,EAEjB,KApDc,EAoDRJ,EAAOI,IAAsBC,EAAiBL,GACnD,IACCA,EAAOM,GAMP,CALC,MAAOC,GACR,IAAKV,EAAU,CACdD,EAAQW,EACRV,GAAW,CACX,CACD,CAEFG,EAASE,CACT,CACD,CACDD,EAAiB,EACjBN,IAEA,GAAIE,EACH,MAAMD,CAjCN,MAFAD,GAqCF,CAeA,IAAIa,OAA6CV,EAE7CW,EAAiB,EAkBjBV,OAAoCD,EACpCH,EAAa,EACbM,EAAiB,EAIjBS,EAAgB,EAEpB,SAASC,EAAcC,GACtB,QAAoBd,IAAhBU,EAAJ,CAIA,IAAIK,EAAOD,EAAOE,EAClB,QAAahB,IAATe,GAAsBA,EAAKE,IAAYP,EAAa,CAavDK,EAAO,CACNG,EAAU,EACVC,EAASL,EACTM,EAAaV,EAAYW,EACzBC,OAAatB,EACbiB,EAASP,EACTa,OAAavB,EACbwB,OAAaxB,EACbyB,EAAeV,GAGhB,QAA6Bf,IAAzBU,EAAYW,EACfX,EAAYW,EAASC,EAAcP,EAEpCL,EAAYW,EAAWN,EACvBD,EAAOE,EAAQD,EAIf,GAtJe,GAsJXL,EAAYJ,EACfQ,EAAOY,EAAWX,GAEnB,OAAOA,CACP,MAAUA,IAAmB,IAAnBA,EAAKG,EAAiB,CAEhCH,EAAKG,EAAW,EAehB,QAAyBlB,IAArBe,EAAKO,EAA2B,CACnCP,EAAKO,EAAYF,EAAcL,EAAKK,EAEpC,QAAyBpB,IAArBe,EAAKK,EACRL,EAAKK,EAAYE,EAAcP,EAAKO,EAGrCP,EAAKK,EAAcV,EAAYW,EAC/BN,EAAKO,OAActB,EAEnBU,EAAYW,EAAUC,EAAcP,EACpCL,EAAYW,EAAWN,CACvB,CAID,OAAOA,CACP,CAzEA,CA2EF,CAiDA,SAASY,EAAqBC,GAC7BC,KAAKC,EAASF,EACdC,KAAKX,EAAW,EAChBW,KAAKb,OAAQhB,EACb6B,KAAKE,OAAW/B,CACjB,CAEA2B,EAAOK,UAAUC,MAAQvC,EAEzBiC,EAAOK,UAAUE,EAAW,WAC3B,OAAO,CACR,EAEAP,EAAOK,UAAUN,EAAa,SAAUX,GACvC,GAAIc,KAAKE,IAAahB,QAA6Bf,IAArBe,EAAKQ,EAA2B,CAC7DR,EAAKS,EAAcK,KAAKE,EACxB,QAAsB/B,IAAlB6B,KAAKE,EACRF,KAAKE,EAASR,EAAcR,EAE7Bc,KAAKE,EAAWhB,CAChB,CACF,EAEAY,EAAOK,UAAUG,EAAe,SAAUpB,GAEzC,QAAsBf,IAAlB6B,KAAKE,EAAwB,CAChC,IAAMK,EAAOrB,EAAKQ,EACZnB,EAAOW,EAAKS,EAClB,QAAaxB,IAAToC,EAAoB,CACvBA,EAAKZ,EAAcpB,EACnBW,EAAKQ,OAAcvB,CACnB,CACD,QAAaA,IAATI,EAAoB,CACvBA,EAAKmB,EAAca,EACnBrB,EAAKS,OAAcxB,CACnB,CACD,GAAIe,IAASc,KAAKE,EACjBF,KAAKE,EAAW3B,CAEjB,CACF,EAEAuB,EAAOK,UAAUK,UAAY,SAAUC,GACtC,IAAMxB,EAASe,KACf,OAAO3B,EAAO,WACb,IAAM0B,EAAQd,EAAOc,MACfW,EA7RS,GA6RFV,KAAKvB,EAClBuB,KAAKvB,IAAU,GACf,IACCgC,EAAGV,EAGH,CAFA,QACAC,KAAKvB,GAAUiC,CACf,CACF,EACD,EAEAZ,EAAOK,UAAUQ,QAAU,WAC1B,OAAOX,KAAKD,KACb,EAEAD,EAAOK,UAAUS,SAAW,WAC3B,OAAOZ,KAAKD,MAAQ,EACrB,EAEAD,EAAOK,UAAUU,OAAS,WACzB,OAAWb,KAACD,KACb,EAEAD,EAAOK,UAAUW,KAAO,WACvB,YAAYb,CACb,EAEAc,OAAOC,eAAelB,EAAOK,UAAW,QAAS,CAChDc,IAAGA,WACF,IAAM/B,EAAOF,EAAcgB,MAC3B,QAAa7B,IAATe,EACHA,EAAKG,EAAWW,KAAKX,EAEtB,OAAOW,KAAKC,CACb,EACAiB,aAAkBnB,GACjB,GAAIlB,aAAuBsC,GA5U7B,WACC,MAAU,IAAAvD,MAAM,oCACjB,CA2UGwD,GAGD,GAAIrB,IAAUC,KAAKC,EAAQ,CAC1B,GAAI3B,EAAiB,IACpBX,IAGDqC,KAAKC,EAASF,EACdC,KAAKX,IACLN,IAhTFf,IAmTE,IACC,IACC,IAAIkB,EAAOc,KAAKE,OACP/B,IAATe,EACAA,EAAOA,EAAKS,EAEZT,EAAKE,EAAQiC,GAId,CAFA,QACAtD,GACA,CACD,CACF,IAOD,SAASW,EAAiB4C,GAIzB,IACC,IAAIpC,EAAOoC,EAAO9B,OACTrB,IAATe,EACAA,EAAOA,EAAKO,EAKZ,GACCP,EAAKI,EAAQD,IAAaH,EAAKG,IAC9BH,EAAKI,EAAQe,KACdnB,EAAKI,EAAQD,IAAaH,EAAKG,EAE/B,SAKF,OAAO,CACR,CAEA,SAASkC,EAAeD,GAavB,IACC,IAAIpC,EAAOoC,EAAO9B,OACTrB,IAATe,EACAA,EAAOA,EAAKO,EACX,CACD,IAAM+B,EAAetC,EAAKI,EAAQH,EAClC,QAAqBhB,IAAjBqD,EACHtC,EAAKU,EAAgB4B,EAEtBtC,EAAKI,EAAQH,EAAQD,EACrBA,EAAKG,GAAY,EAEjB,QAAyBlB,IAArBe,EAAKO,EAA2B,CACnC6B,EAAO9B,EAAWN,EAClB,KACA,CACD,CACF,CAEA,SAASuC,EAAeH,GACvB,IAAIpC,EAAOoC,EAAO9B,EACdkC,OAAOvD,EAOX,WAAgBA,IAATe,EAAoB,CAC1B,IAAMqB,EAAOrB,EAAKK,EAUlB,IAAuB,IAAnBL,EAAKG,EAAiB,CACzBH,EAAKI,EAAQgB,EAAapB,GAE1B,QAAaf,IAAToC,EACHA,EAAKd,EAAcP,EAAKO,EAEzB,QAAyBtB,IAArBe,EAAKO,EACRP,EAAKO,EAAYF,EAAcgB,CAEhC,MAWAmB,EAAOxC,EAGRA,EAAKI,EAAQH,EAAQD,EAAKU,EAC1B,QAA2BzB,IAAvBe,EAAKU,EACRV,EAAKU,OAAgBzB,EAGtBe,EAAOqB,CACP,CAEDe,EAAO9B,EAAWkC,CACnB,CAcA,SAASP,EAAyBQ,GACjC7B,EAAO8B,KAAK5B,UAAM7B,GAElB6B,KAAK6B,EAAWF,EAChB3B,KAAKR,OAAWrB,EAChB6B,KAAK8B,EAAiB/C,EAAgB,EACtCiB,KAAKvB,EAreW,CAsejB,EAEA0C,EAAShB,UAAY,IAAIL,GAENO,EAAW,WAC7BL,KAAKvB,IAAU,EAEf,GA/ee,EA+eXuB,KAAKvB,EACR,OAAO,EAMR,GAjfgB,QAifXuB,KAAKvB,GACT,OAAO,EAERuB,KAAKvB,IAAU,EAEf,GAAIuB,KAAK8B,IAAmB/C,EAC3B,OACA,EACDiB,KAAK8B,EAAiB/C,EAItBiB,KAAKvB,GAlgBU,EAmgBf,GAAIuB,KAAKX,EAAW,IAAMX,EAAiBsB,MAAO,CACjDA,KAAKvB,IAAU,EACf,OAAO,CACP,CAED,IAAMsD,EAAclD,EACpB,IACC0C,EAAevB,MACfnB,EAAcmB,KACd,IAAMD,EAAQC,KAAK6B,IACnB,GAzgBgB,GA0gBf7B,KAAKvB,GACLuB,KAAKC,IAAWF,GACE,IAAlBC,KAAKX,EACJ,CACDW,KAAKC,EAASF,EACdC,KAAKvB,IAAU,GACfuB,KAAKX,GACL,CAKD,CAJC,MAAOT,GACRoB,KAAKC,EAASrB,EACdoB,KAAKvB,GAphBW,GAqhBhBuB,KAAKX,GACL,CACDR,EAAckD,EACdN,EAAezB,MACfA,KAAKvB,IAAU,EACf,OAAO,CACR,EAEA0C,EAAShB,UAAUN,EAAa,SAAUX,GACzC,QAAsBf,IAAlB6B,KAAKE,EAAwB,CAChCF,KAAKvB,GAAUuD,GAIf,IACC,IAAI9C,EAAOc,KAAKR,OACPrB,IAATe,EACAA,EAAOA,EAAKO,EAEZP,EAAKI,EAAQO,EAAWX,EAEzB,CACDY,EAAOK,UAAUN,EAAW+B,KAAK5B,KAAMd,EACxC,EAEAiC,EAAShB,UAAUG,EAAe,SAAUpB,GAE3C,QAAsBf,IAAlB6B,KAAKE,EAAwB,CAChCJ,EAAOK,UAAUG,EAAasB,KAAK5B,KAAMd,GAIzC,QAAsBf,IAAlB6B,KAAKE,EAAwB,CAChCF,KAAKvB,IAAU,GAEf,IACC,IAAIS,EAAOc,KAAKR,OACPrB,IAATe,EACAA,EAAOA,EAAKO,EAEZP,EAAKI,EAAQgB,EAAapB,EAE3B,CACD,CACF,EAEAiC,EAAShB,UAAUkB,EAAU,WAC5B,KAvkBgB,EAukBVrB,KAAKvB,GAAoB,CAC9BuB,KAAKvB,GAAUuD,EAEf,IACC,IAAI9C,EAAOc,KAAKE,OACP/B,IAATe,EACAA,EAAOA,EAAKS,EAEZT,EAAKE,EAAQiC,GAEd,CACF,EAEAF,EAAShB,UAAUW,KAAO,WACzB,IAAKd,KAAKK,IACT1C,IAED,GArlBiB,GAqlBbqC,KAAKvB,EACR,WAAWwB,EAEZ,OAAWD,KAACC,CACb,EAEAc,OAAOC,eAAeG,EAAShB,UAAW,QAAS,CAClDc,IAAG,WACF,GAjmBc,EAimBVjB,KAAKvB,EACRd,IAED,IAAMuB,EAAOF,EAAcgB,MAC3BA,KAAKK,IACL,QAAalC,IAATe,EACHA,EAAKG,EAAWW,KAAKX,EAEtB,GArmBgB,GAqmBZW,KAAKvB,EACR,MAAUuB,KAACC,EAEZ,OAAOD,KAAKC,CACb,IAWD,SAASgC,EAAc5D,GACtB,IAAM6D,EAAU7D,EAAO8D,EACvB9D,EAAO8D,OAAWhE,EAElB,GAAuB,mBAAZ+D,EAAwB,CA5lBnClE,IAgmBC,IAAM+D,EAAclD,EACpBA,OAAcV,EACd,IACC+D,GASA,CARC,MAAOtD,GACRP,EAAOI,IAAU,EACjBJ,EAAOI,GAnoBO,EAooBd2D,EAAc/D,GACd,MAAMO,CACN,CAAA,QACAC,EAAckD,EACdhE,GACA,CACD,CACF,CAEA,SAASqE,EAAc/D,GACtB,IACC,IAAIa,EAAOb,EAAOmB,OACTrB,IAATe,EACAA,EAAOA,EAAKO,EAEZP,EAAKI,EAAQgB,EAAapB,GAE3Bb,EAAOwD,OAAW1D,EAClBE,EAAOmB,OAAWrB,EAElB8D,EAAc5D,EACf,CAEA,SAASgE,EAAwBN,GAChC,GAAIlD,IAAgBmB,KACnB,UAAUpC,MAAM,uBAEjB6D,EAAezB,MACfnB,EAAckD,EAEd/B,KAAKvB,IAAU,EACf,GAnqBgB,EAmqBZuB,KAAKvB,EACR2D,EAAcpC,MAEfjC,GACD,CAkBA,SAASuE,EAAqBX,GAC7B3B,KAAK6B,EAAWF,EAChB3B,KAAKmC,OAAWhE,EAChB6B,KAAKR,OAAWrB,EAChB6B,KAAKxB,OAAqBL,EAC1B6B,KAAKvB,EA5rBW,EA6rBjB,CAEA6D,EAAOnC,UAAUxB,EAAY,WAC5B,IAAM4D,EAASvC,KAAKwC,IACpB,IACC,GApsBe,EAosBXxC,KAAKvB,EAAmB,OAC5B,QAAsBN,IAAlB6B,KAAK6B,EAAwB,OAEjC,IAAMK,EAAUlC,KAAK6B,IACrB,GAAuB,mBAAZK,EACVlC,KAAKmC,EAAWD,CAIjB,CAFA,QACAK,GACA,CACF,EAEAD,EAAOnC,UAAUqC,EAAS,WACzB,GAptBe,EAotBXxC,KAAKvB,EACRd,IAEDqC,KAAKvB,GAvtBU,EAwtBfuB,KAAKvB,IAAU,EACfwD,EAAcjC,MACduB,EAAevB,MA1rBfhC,IA6rBA,IAAM+D,EAAclD,EACpBA,EAAcmB,KACd,OAAOqC,EAAUI,KAAKzC,KAAM+B,EAC7B,EAEAO,EAAOnC,UAAUkB,EAAU,WAC1B,KAluBgB,EAkuBVrB,KAAKvB,GAAoB,CAC9BuB,KAAKvB,GAnuBU,EAouBfuB,KAAKxB,EAAqBJ,EAC1BA,EAAgB4B,IAChB,CACF,EAEAsC,EAAOnC,UAAUuC,EAAW,WAC3B1C,KAAKvB,GAxuBW,EA0uBhB,KA7uBe,EA6uBTuB,KAAKvB,GACV2D,EAAcpC,KAEhB,EAEA,SAAS3B,EAAOsD,GACf,IAAMtD,EAAS,IAAIiE,EAAOX,GAC1B,IACCtD,EAAOM,GAIP,CAHC,MAAOC,GACRP,EAAOqE,IACP,MAAM9D,CACN,CAGD,OAAOP,EAAOqE,EAASD,KAAKpE,EAC7B,CAAAsE,QAAA7C,OAAAA,EAAA6C,QAAAC,MAjrBA,SAAkBC,GACjB,GAAI7E,EAAa,EAChB,OAAO6E,IA9CR7E,IAiDA,IACC,OAAO6E,GAGP,CAFA,QACA9E,GACA,CACF,EAuqBA4E,QAAAG,SAzIA,SAAqBnB,GACpB,OAAW,IAAAR,EAASQ,EACrB,EAuIAgB,QAAAtE,OAAAA,EAAAsE,QAAA1D,OA3ZA,SAAmBc,GAClB,OAAO,IAAID,EAAOC,EACnB,EAyZA4C,QAAAI,UAhqBA,SAAsBF,GACrB,GAAI/D,EAAiB,EACpB,OAAO+D,IAER,IAAMd,EAAclD,EACpBA,OAAcV,EACdW,IACA,IACC,OAAO+D,GAIP,CAHA,QACA/D,IACAD,EAAckD,CACd,CACF"}