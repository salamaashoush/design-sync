#!/usr/bin/env -S npx tsx

import { defineCommand, runMain } from 'citty';
import example from '../example.json';
import { TokensManager } from './manager/manager';
import { vanillaExtractPlugin } from './plugins/vanillaExtract';
import { loadConfig } from './utils';

const main = defineCommand({
  meta: {
    name: 'tokenize-cli',
    version: '1.0.0',
    description: 'Download and process design tokens from gitlab repo',
  },
  args: {
    repo: {
      type: 'positional',
      description: 'git repo url',
      valueHint: 'gh:username/repo#branch',
      required: false,
    },
    tokensPath: {
      type: 'string',
      description: 'path to tokens file in repo',
    },
    out: {
      type: 'string',
      description: 'path to output file',
    },
    config: {
      type: 'string',
      description: 'path to config file',
    },
    auth: {
      type: 'string',
      description: 'git provider auth token',
    },
  },
  async run({ args }) {
    const config = await loadConfig(args, args.config);
    const tokensManager = new TokensManager(config);
    try {
      // const tokensObj = await fetchTokens(repo, tokensPath, auth);
      tokensManager.use(vanillaExtractPlugin());
      tokensManager.setTokens(example);
      await tokensManager.run();
      // console.log('tokens processed successfully');
      // const outputContent = `// autogenerated from figma and gitlab, please avoid modifying it manually
      // export const TOKENS = ${JSON.stringify(finalTokens, null, 2)} as const;`;
      // await writeFile(out, await formatTextWithPrettier(outputContent), 'utf-8');
      // console.log('tokens saved successfully');
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error(error);
    }
  },
});

runMain(main);
